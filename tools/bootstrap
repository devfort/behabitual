#!/bin/sh

: ${VIRTUAL_ENV:=}

set -eu

cd "$(dirname "$0")"
cd ..

status () {
  echo "---> $@" >&2
}

error () {
  echo "ERROR: $@" >&2
  exit 1
}

check_venv () {
  if [ -n "$VIRTUAL_ENV" ]; then
    status "Found virtualenv '${VIRTUAL_ENV##*/}'"
    return 0
  fi

  error 'Please create and activate a virtualenv first (e.g. "mkvirtualenv hobbit")!'
} 

bootstrap_requirements () {
  status "Installing requirements"
  pip install -r requirements.txt
}

bootstrap_db () {
  status "Running initial database setup"
  if psql -l > /dev/null; then
    status "Found a DB user, not creating a new one"
  else
    status "Creating a DB user"
    sudo -u postgres createuser --superuser $USER
  fi
  if psql hobbit -c 'SELECT 1;' > /dev/null; then
    status "Found a base database, not creating a new one"
  else
    status "Creating a base database"
    createdb -E UTF8 -T template0 hobbit
  fi
}

bootstrap_django () {
  status "Running initial database migrations"
  python manage.py syncdb --migrate
  if test "$(python manage.py listsuperusers)"; then
    status "Found some superusers, not creating a new one"
  else
    status "Creating an application superuser"
    python manage.py createsuperuser
  fi
}

bootstrap_app () {
  if [ ! -e .env ]; then
    status "Copying .env.example to .env"
    cp .env.example .env
  fi
}

main () {
  check_venv
  bootstrap_db
  bootstrap_requirements
  bootstrap_django
  bootstrap_app
  status 'All done'
}

main
